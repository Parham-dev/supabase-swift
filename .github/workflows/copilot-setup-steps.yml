name: "Copilot Setup Steps"

# This workflow sets up the development environment for GitHub Copilot coding agent
# It configures Swift, Xcode, iOS Simulator, and installs helpful development tools
# The agent will be able to:
# - Build and test Swift packages
# - Build and test iOS apps in Xcode
# - Run unit tests and UI tests
# - Use code quality tools (SwiftLint, swift-format)
# - Access pre-installed dependencies for faster iterations

# Automatically run the setup steps when they are changed to allow for easy validation
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot
  copilot-setup-steps:
    runs-on: macos-latest

    # Set appropriate permissions
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Enable LFS if you use large files
          lfs: false
          # Use a different path to avoid cyclic dependency issues
          path: swift-supabase-sync-project
          
      - name: Display working directory info
        run: |
          echo "Current directory: $(pwd)"
          echo "Checkout directory: swift-supabase-sync-project"
          cd swift-supabase-sync-project
          echo "Package.swift location:"
          find . -name "Package.swift" -type f | head -5
          echo "Package name from Package.swift:"
          grep "name:" Package.swift | head -1
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.2"
          
      - name: Cache Swift Package Manager dependencies
        uses: actions/cache@v4
        with:
          path: |
            swift-supabase-sync-project/.build
            ~/Library/Developer/Xcode/DerivedData
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('swift-supabase-sync-project/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Setup Swift environment
        run: |
          echo "Setting up Swift environment..."
          # Set environment variables for Swift Package Manager
          echo "SWIFTPM_PACKAGE_ROOT=$GITHUB_WORKSPACE/swift-supabase-sync-project" >> $GITHUB_ENV
          echo "WORKING_DIR=$GITHUB_WORKSPACE/swift-supabase-sync-project" >> $GITHUB_ENV
          echo "Package root: $GITHUB_WORKSPACE/swift-supabase-sync-project"
          
      - name: Clean build artifacts
        run: |
          echo "Cleaning any existing build artifacts..."
          cd $WORKING_DIR
          rm -rf .build
          rm -rf .swiftpm
          rm -rf ~/Library/Developer/Xcode/DerivedData/*-*
          swift package clean || true
          
      - name: Resolve Swift Package dependencies
        run: |
          echo "Resolving Swift Package Manager dependencies..."
          cd $WORKING_DIR
          swift package resolve
          
      - name: Build Swift Package
        run: |
          echo "Building Swift Package..."
          cd $WORKING_DIR
          swift build -v
          
      - name: Run Swift Package Tests
        run: |
          echo "Running Swift Package tests..."
          cd $WORKING_DIR
          swift test -v --enable-code-coverage || echo "Tests failed but continuing setup"
          
      - name: Setup iOS Simulator
        run: |
          echo "Setting up iOS Simulator..."
          # List available simulators and runtimes
          xcrun simctl list devices
          xcrun simctl list runtimes
          
          # Create and boot a simulator
          SIMULATOR_NAME="iPhone 15 Pro"
          echo "Creating simulator: $SIMULATOR_NAME"
          xcrun simctl create "$SIMULATOR_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro" "com.apple.CoreSimulator.SimRuntime.iOS-17-2" || true
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
      - name: Build iOS App (Xcode)
        run: |
          echo "Building iOS app with Xcode..."
          cd $WORKING_DIR
          xcodebuild -scheme SupabaseSwift \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
            -configuration Debug \
            build || true
            
      - name: Prepare test environment
        run: |
          echo "Setting up test environment..."
          # Create any necessary test configurations or mock data
          mkdir -p TestResults
          
      - name: Install additional tools
        run: |
          echo "Installing helpful development tools..."
          # Update Homebrew first
          brew update || true
          
          # Install SwiftLint for code linting
          brew install swiftlint || true
          
          # Install xcbeautify for better Xcode output formatting
          brew install xcbeautify || true
          
          # Install swift-format for code formatting
          brew install swift-format || true
          
      - name: Setup environment variables
        run: |
          echo "Setting up environment variables..."
          echo "SWIFT_VERSION=$(swift --version | head -n 1)" >> $GITHUB_ENV
          echo "XCODE_VERSION=15.2" >> $GITHUB_ENV
          echo "IOS_SIMULATOR=iPhone 15 Pro" >> $GITHUB_ENV
          echo "PROJECT_ROOT=$WORKING_DIR" >> $GITHUB_ENV
          
      - name: Verify setup
        run: |
          echo "Verifying development environment setup..."
          echo "Swift version: $(swift --version)"
          echo "Xcode version: $(xcodebuild -version)"
          echo "Available simulators:"
          xcrun simctl list devices
          echo "Project structure:"
          cd $WORKING_DIR && ls -la
          echo "Swift Package dependencies resolved:"
          cd $WORKING_DIR && ls -la .build || true
          
      - name: Create helper commands file
        run: |
          echo "Creating helper commands for Copilot..."
          cd $WORKING_DIR
          cat > copilot-commands.md << 'EOF'
          # Copilot Helper Commands for Swift/iOS Development

          ## Build Commands
          - Build Swift Package: `swift build`
          - Build iOS App: `xcodebuild -scheme SupabaseSwift -destination 'platform=iOS Simulator,name=iPhone 15 Pro' build`
          - Clean build: `swift package clean && xcodebuild clean`

          ## Test Commands
          - Run Swift Package tests: `swift test`
          - Run specific test: `swift test --filter TestName`
          - Run Xcode unit tests: `xcodebuild test -scheme SupabaseSwift -destination 'platform=iOS Simulator,name=iPhone 15 Pro'`
          - Run tests with coverage: `swift test --enable-code-coverage`

          ## Code Quality
          - Lint code: `swiftlint`
          - Format code: `swift-format -i Sources/**/*.swift Tests/**/*.swift`
          - Check format: `swift-format lint Sources/**/*.swift Tests/**/*.swift`

          ## Dependency Management
          - Update dependencies: `swift package update`
          - Resolve dependencies: `swift package resolve`
          - Show dependencies: `swift package show-dependencies`

          ## Debugging
          - Build with verbose output: `swift build -v`
          - Test with verbose output: `swift test -v`
          - Xcode build with pretty output: `xcodebuild -scheme SupabaseSwift build | xcbeautify`

          ## Project Structure
          - Main library: Sources/SwiftSupabaseSync/
          - Package tests: Tests/SwiftSupabaseSyncTests/
          - iOS app: SupabaseSwift/
          - Xcode tests: SupabaseSwiftTests/, SupabaseSwiftUITests/
          EOF
          
          echo "Helper commands saved to copilot-commands.md"