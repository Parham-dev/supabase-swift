name: "Copilot Setup Steps"

# This workflow sets up the development environment for GitHub Copilot coding agent
# Focused on Swift Package development and testing for AI-assisted development
# The agent will be able to:
# - Build and test Swift packages
# - Use code quality tools (SwiftLint, swift-format)
# - Access pre-installed dependencies for faster iterations

# Manual trigger only - auto-run disabled for AI development environment
on:
  workflow_dispatch:

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot
  copilot-setup-steps:
    runs-on: macos-latest

    # Set appropriate permissions
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Enable LFS if you use large files
          lfs: false
          # Use a different path to avoid cyclic dependency issues
          path: swift-supabase-sync-project
          
      - name: Verify setup
        run: |
          echo "Swift Package development environment setup"
          cd swift-supabase-sync-project
          echo "Package: $(grep "name:" Package.swift | head -1)"
          echo "Swift version: $(swift --version | head -1)"
          
      # Xcode setup - commented out for Swift Package focus
      # - name: Setup Xcode
      #   uses: maxim-lobanov/setup-xcode@v1
      #   with:
      #     xcode-version: "15.2"
          
      - name: Cache Swift Package dependencies
        uses: actions/cache@v4
        with:
          path: |
            swift-supabase-sync-project/.build
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('swift-supabase-sync-project/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Setup Swift environment
        run: |
          echo "Setting up Swift environment..."
          # Set environment variables for Swift Package Manager
          echo "SWIFTPM_PACKAGE_ROOT=$GITHUB_WORKSPACE/swift-supabase-sync-project" >> $GITHUB_ENV
          echo "WORKING_DIR=$GITHUB_WORKSPACE/swift-supabase-sync-project" >> $GITHUB_ENV
          echo "Package root: $GITHUB_WORKSPACE/swift-supabase-sync-project"
          
      - name: Clean build artifacts
        run: |
          echo "Cleaning any existing build artifacts..."
          cd $WORKING_DIR
          rm -rf .build
          rm -rf .swiftpm
          rm -rf ~/Library/Developer/Xcode/DerivedData/*-*
          swift package clean || true
          
      - name: Resolve Swift Package dependencies
        run: |
          echo "Resolving Swift Package Manager dependencies..."
          cd $WORKING_DIR
          swift package resolve
          
      - name: Build Swift Package
        run: |
          echo "Building Swift Package..."
          cd $WORKING_DIR
          swift build
          
      - name: Run Swift Package Tests
        run: |
          echo "Running Swift Package tests..."
          cd $WORKING_DIR
          swift test --enable-code-coverage || echo "Tests failed but continuing setup"
          
      # iOS Simulator setup - commented out for Swift Package focus
      # - name: Setup iOS Simulator
      #   run: |
      #     echo "Setting up iOS Simulator..."
      #     xcrun simctl list devices
      #     SIMULATOR_NAME="iPhone 15 Pro"
      #     xcrun simctl create "$SIMULATOR_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro" "com.apple.CoreSimulator.SimRuntime.iOS-17-2" || true
      #     xcrun simctl boot "$SIMULATOR_NAME" || true
          
      # iOS App build - commented out for Swift Package focus
      # - name: Build iOS App (Xcode)
      #   run: |
      #     echo "Building iOS app with Xcode..."
      #     cd $WORKING_DIR
      #     xcodebuild -scheme SupabaseSwift \
      #       -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
      #       -configuration Debug \
      #       build || true
            
      # Test environment setup - simplified for Swift Package focus
      # - name: Prepare test environment
      #   run: |
      #     echo "Setting up test environment..."
      #     mkdir -p TestResults
          
      - name: Install development tools
        run: |
          echo "Installing Swift development tools..."
          # Install SwiftLint for code linting
          brew install swiftlint || true
          
          # Install swift-format for code formatting
          brew install swift-format || true
          
      - name: Setup environment variables
        run: |
          echo "Setting up environment variables..."
          echo "SWIFT_VERSION=$(swift --version | head -n 1)" >> $GITHUB_ENV
          echo "PROJECT_ROOT=$WORKING_DIR" >> $GITHUB_ENV
          
      - name: Final verification
        run: |
          echo "✅ Swift Package development environment ready!"
          echo "Swift version: $(swift --version | head -1)"
          echo "Project structure:"
          cd $WORKING_DIR && ls -la Sources/
          echo "Dependencies resolved: $(ls $WORKING_DIR/.build 2>/dev/null && echo 'Yes' || echo 'No')"
          
      - name: Create helper commands file
        run: |
          echo "Creating helper commands for Copilot..."
          cd $WORKING_DIR
          cat > copilot-commands.md << 'EOF'
          # Copilot Helper Commands - Swift Package Development

          ## 🚀 Quick Start
          All commands should be run from the Swift Package directory.

          ## 📦 Build Commands
          - Build package: `swift build`
          - Clean build: `swift package clean`
          - Build with debug info: `swift build -c debug`

          ## 🧪 Test Commands
          - Run all tests: `swift test`
          - Run specific test: `swift test --filter TestName`
          - Run tests with coverage: `swift test --enable-code-coverage`
          - Verbose test output: `swift test -v`

          ## 🔧 Code Quality
          - Lint code: `swiftlint`
          - Format code: `swift-format -i Sources/**/*.swift Tests/**/*.swift`
          - Check format: `swift-format lint Sources/**/*.swift Tests/**/*.swift`

          ## 📋 Dependency Management
          - Update dependencies: `swift package update`
          - Resolve dependencies: `swift package resolve`
          - Show dependencies: `swift package show-dependencies`
          - Reset package: `swift package reset`

          ## 📁 Project Structure
          - Main library: `Sources/SwiftSupabaseSync/`
          - Package tests: `Tests/SwiftSupabaseSyncTests/`
          - Mock objects: `Tests/SwiftSupabaseSyncTests/Mock*`

          ## 💡 Tips for AI Development
          - Focus on Swift Package development and testing
          - Use the mock objects for unit testing
          - Follow Clean Architecture patterns in the codebase
          - Test coverage is enabled by default
          EOF
          
          echo "Helper commands saved to copilot-commands.md"