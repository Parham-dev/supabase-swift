name: "Copilot Setup Steps (Symlink Method)"

# This workflow uses a symlink approach to avoid cyclic dependency issues
# It creates a symlink with a different name to the actual checkout directory

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps-symlink.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps-symlink.yml

jobs:
  copilot-setup-steps:
    runs-on: macos-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create symlink to avoid cyclic dependency
        run: |
          echo "Creating symlink to avoid cyclic dependency issue..."
          cd ..
          ln -s $(basename $GITHUB_WORKSPACE) swift-package-project
          echo "Created symlink: $(pwd)/swift-package-project -> $GITHUB_WORKSPACE"
          cd swift-package-project
          pwd
          ls -la
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.2"
          
      - name: Cache Swift dependencies
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
            ~/.swiftpm
          key: ${{ runner.os }}-spm-v2-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-v2-
            
      - name: Build Swift Package
        run: |
          echo "Building Swift Package..."
          cd ../swift-package-project
          swift build -v
          
      - name: Run Swift Package Tests
        run: |
          echo "Running Swift Package tests..."
          cd ../swift-package-project
          swift test -v --enable-code-coverage
          
      - name: Setup iOS Simulator
        run: |
          echo "Setting up iOS Simulator..."
          xcrun simctl list devices
          # Create simulator
          SIMULATOR_NAME="iPhone 15 Pro"
          xcrun simctl create "$SIMULATOR_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro" "com.apple.CoreSimulator.SimRuntime.iOS-17-2" || true
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
      - name: Build iOS App (if exists)
        run: |
          echo "Building iOS app with Xcode..."
          cd ../swift-package-project
          if [ -f "SupabaseSwift.xcodeproj/project.pbxproj" ]; then
            xcodebuild -scheme SupabaseSwift \
              -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
              -configuration Debug \
              build || echo "iOS build failed but continuing"
          else
            echo "No Xcode project found, skipping iOS app build"
          fi
          
      - name: Install development tools
        run: |
          echo "Installing development tools..."
          brew update || true
          brew install swiftlint || true
          brew install xcbeautify || true
          brew install swift-format || true
          
      - name: Create Copilot helper commands
        run: |
          cd ../swift-package-project
          cat > copilot-commands.md << 'EOF'
          # Copilot Helper Commands (Symlink Method)
          
          ## Important: Working Directory
          Always use: `cd ../swift-package-project` before running commands
          
          ## Build Commands
          - Build: `cd ../swift-package-project && swift build`
          - Clean: `cd ../swift-package-project && swift package clean`
          
          ## Test Commands
          - Test: `cd ../swift-package-project && swift test`
          - Test with coverage: `cd ../swift-package-project && swift test --enable-code-coverage`
          
          ## iOS App Commands
          - Build iOS: `cd ../swift-package-project && xcodebuild -scheme SupabaseSwift build`
          - Test iOS: `cd ../swift-package-project && xcodebuild test -scheme SupabaseSwift`
          
          ## Tools
          - Lint: `cd ../swift-package-project && swiftlint`
          - Format: `cd ../swift-package-project && swift-format -i Sources/**/*.swift`
          EOF
          
      - name: Verify setup
        run: |
          echo "Environment setup complete!"
          echo "Swift version: $(swift --version)"
          echo "Xcode version: $(xcodebuild -version)"
          echo "Working directory: ../swift-package-project"